<img src="images/logo.png" alt="b/c" class="logo">
<h1>The Bent on Creation Playbook</h1>
<p class="subhead">An approach for the solo designer/developer</p>

<h2 id="introduction">Introduction</h2>

<h3 id="my_background">My Background</h3>

<img src="/images/jeremy.jpg" width="140" alt="Jeremy Smith" class="pull-right img-round">

<p>I’m a web designer/developer hybrid. I’ve been working on the web since 1998. The majority of both my professional and hobby experience has been as a solo designer/developer. I love design and programming equally and, throughout my career, I've tried to sharpen my abilities in both. I choose projects that give me experience in as many aspects of web site and web app creation as possible. That typically means I'm working on projects where there's either not a need or not an ability to hire a team.</p>

<h3 id="purpose">Purpose</h3>

<p>This playbook is inspired largely by the <a href="http://playbook.thoughtbot.com/">thoughtbot playbook</a>. If you haven't read it, you should check it out. thoughtbot uses their playbook to document best practices and help their team understand how they run the company and how they build products.</p>

<p>You may be wondering why I'd want to write my own playbook. After all, since I'm a <em>solo</em> designer/developer, I don't have teammates I need to share institutional knowledge with. Here's what is motivating me to build my own playbook:</p>

<ol>
  <li>Most of my work is done alone. I rarely have a need to defend, or even verbalize, my process, toolset, or philosophy. Writing down the details makes concrete what is often merely intuitive.</li>

  <li>Documenting my process should help me find weaks spots and holes. Already, as I've been thinking over the various components of my work, I've found things that need to change.</li>

  <li>As an independent contractor, I have no supervisor pushing me to a higher standard of professionalism. That's not my client's responsibility, it's my responsibility. Owning up to my way of working pushes me to better it.</li>

  <li>I've learned so much from the web design community over the years. I hope this playbook can benefit other solo designer/developers out there.</li>
</ol>

<h2 id="guiding_principles">Guiding Principles</h2>

<p>These principles guide me in finding and doing my work.</p>

<h3 id="choose_fitting_roles">Choose Fitting Roles</h3>

<p>Choosing to be a generalist doesn't mean, because you work cross-functionally, that any and all roles will be a good fit. There are valid reasons for specialization and you'll never be able to compete with specialists.</p>

<p>Many projects won't benefit from a designer/developer hybrid. Often, the larger the team or project, the more specialization is needed and the less a generalist is useful. Choose companies or projects that will benefit from a generalist. This is likely to be:</p>

<ul>
  <li>Small businesses and organizations</li>
  <li>Early-stage startups</li>
  <li>Niche web products</li>
  <li>Companies with fluctuating needs or staff</li>
</ul>

<p>Another option is to look for design shops that need "some development" or dev shops that need "some design." But this can be a tricky situtation. On the one hand, you may get to work under some great specialists (designers in design shops, developers in dev shops), but the organization is not likely going to value the other discipline to the same degree. They're biased to see their specialty as superior and the other disciplines as supports to the "primary" work.</p>

<p>Look for places that will value someone who can "wear multiple hats." This leads right to the next principle.</p>

<h3 id="take_responsibility">Take Responsibility</h3>

<p>The defining characteristic of the specialist is that there are things they "don't do." Developers "don't do" design. Designers "don't do" copy. Copywriters "don't do" systems administration. Therefore, the advantage of the generalist over the specialist is that they will do whatever needs to be done. <em>This is your key value proposition.</em> Business owners need someone who can be fully responsible.</p>

<p>Make yourself invaluable to your employer or client by taking responsibility. I mean that in two ways.<p>

<p>First, take full responsibility for the areas you are already expected to perform well in. These are the things that are seen and obvious to those who pay you. Do the job you were hired to do, and if you fail, take ownership and then take steps to remedy the situation.</p>

<p>Second, acquire adjacent areas of responsibility that are unoccupied or poorly occupied. These are things that are often not seen and not obvious to those who pay you. No one's organized all the brand's assets? You do it. No one's created a site style guide? You do it. No one's audited the CSS for unused styles? You do it. No one's tracking user signups? You do it. No one's documented rebuilding the server from bare metal? You do it.</p>

<p>Know your client, earn their trust, and then take the initiative to acquire new areas of responsibility. Your client Just stop when you hit someone else's area of responsibility. Or when you're told to.</p>

<p>The more areas of responsibility you have, the more invaluable you are. The more invaluable you are, and the harder it is to replace you, the better your bargaining position for higher pay, greater opportunities, and more flexibility.</p>

<p>As you move into adjacent areas of responsibility, you will inevitably hit against things you don't know how to do. This leads to the next principle.</p>

<h3 id="keep_learning">Keep Learning</h3>

<p>No industry is static, but the web industry is growing and changing at an incredible pace. It's very difficult to keep up. I think this is primarily because it's a young industry, barely 20 years old. The territory is still being mapped out. The roles are still being defined, the best practices are still being discovered.</p>

<p>Even if the industry was static, your own knowledge is limited. You could never hope to know everything, but you should strive to expand your skill set.</p>

<p>One of the most difficult aspects of the learning process is the discomfort--even pain--of starting over as a beginner. Once you've achieved a level of mastery in a certain area, it can seem as if the work it took to be good in that area should somehow count in other areas. It doesn't. It may be true that some knowledge domains connect to each other and the growth is not as difficult in these. But for new territory that you've not worked in before, the process can be humbling and painful. Humble yourself, endure the pain, and accept that you do not know. <em>Yet.</em></p>

<p>Generalists are often self-taught, since formal instruction is usually restricted to the confines of a single discipline. One disadvantage to being self-taught, as opposed to going through formal training or instruction, is that you will have gaps in your education. There will be ideas or skills you weren't even aware of. Remember that you have known unknowns <em>and</em> unknown unknowns. Stay humble, you're probably missing something. It's easier to recover from ignorance if you accept beforehand that you probably are.</p>

<p>There will always be specialists who are surprised by what you don't know. Don't be embarrassed. Their narrower scope allows them a depth and focus you can never match. Don't compare yourself. At the same time, don't hide or neglect areas of ignorance. As you discover these areas, note them. Add them to the list of things you need to get better at. Prioritize that list and start working down through the items.</p>

<p>As you learn, you form opinions about how things work. You are developing a mental model. You are developing ideals. Seek to have <a href="http://blog.codinghorror.com/strong-opinions-weakly-held/">strong opinions, weakly held</a>.</p>

<p>Allocate a certain amount of your day or week to learning. Don't put it off. You are a knowledge worker. You need at least some ongoing learning just to stay current and relevant. But to advance, you'll need to invest in yourself even more.</p>

<h3 id="improve_incrementally">Improve Incrementally</h3>

<p>The previous two principles, "Take Responsibility" and "Keep Learning," can be daunting. There's an endless number of things to do and learn. Rather than becoming overwhelmed and paralyzed, focus on incremental imrpovements, both in the projects you work on and in your own abilities.</p>

<p>Web work is perfectly suited to the philosophy of incremental improvement. We're not launching rockets, where we get one chance to build it right. We're not in traditional publishing, where we can't make any changes after we go to print. Our sites are dynamic and our work should reflect that. Consider all aspects of the work you're doing (branding, aesthetics, tone, usability, markup, page weight, performance, security, up-time, error-handling, etc.) Look for weak spots, problem areas, and low-hanging fruit. Prioritize and address them as you're able. The more skilled you are in each discipline or sub-discipline, the more clearly you can identify and fix problems.</p>

<p>To stay balanced as a generalist, you must work back and forth across the boundaries of your own understanding and abilities, pushing them out a little further as you go. If you stop in one area, you'll become lopsided. Read a book on object oriented design, then switch to a book on typography, then to a book on usability. Read articles, watch videos, attend meetups, and take courses in a variety of areas, working back and forth through the various domains. This learning technique is called <em>interleaving</em> (as opposed to <em>blocking</em>), and it turns out that <a href="http://gocognitive.net/interviews/benefits-interleaving-practice">research shows this is a better way to learn</a>.</p>

<h2 id="my_setup">My Setup</h2>

<h3 id="laptop">Laptop</h3>

<p>

</p>

<h3 id="software">Software</h3>

<p>

</p>


<h2 id="platforms">Platforms</h2>

<h3></h3>

<p>

</p>

<h3></h3>

<p>

</p>

<h2 id="design">Design</h2>

<h3></h3>

<p>

</p>

<h3></h3>

<p>

</p>

<h2 id="development">Development</h2>

<h3></h3>

<p>

</p>

<h3></h3>

<p>

</p>

<h2 id="production">Production</h2>

<h3></h3>

<p>

</p>

<h3></h3>

<p>

</p>

<h2 id="operations">Operations</h2>

<h3></h3>

<p>

</p>

<h3></h3>

<p>

</p>

<h2 id="professional_development">Professional Development</h2>

<h3></h3>

<p>

</p>

<h3></h3>

<p>

</p>
